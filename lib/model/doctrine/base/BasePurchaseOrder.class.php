<?php

/**
 * BasePurchaseOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $seller_id
 * @property timestamp $date_begin
 * @property timestamp $date_end
 * @property float $total_price
 * @property float $total_paid
 * @property float $total_due
 * @property integer $order_status
 * @property string $notes
 * @property Seller $Seller
 * @property Doctrine_Collection $PurchaseItems
 * @property Doctrine_Collection $PurchasePayment
 * 
 * @method integer             getSellerId()        Returns the current record's "seller_id" value
 * @method timestamp           getDateBegin()       Returns the current record's "date_begin" value
 * @method timestamp           getDateEnd()         Returns the current record's "date_end" value
 * @method float               getTotalPrice()      Returns the current record's "total_price" value
 * @method float               getTotalPaid()       Returns the current record's "total_paid" value
 * @method float               getTotalDue()        Returns the current record's "total_due" value
 * @method integer             getOrderStatus()     Returns the current record's "order_status" value
 * @method string              getNotes()           Returns the current record's "notes" value
 * @method Seller              getSeller()          Returns the current record's "Seller" value
 * @method Doctrine_Collection getPurchaseItems()   Returns the current record's "PurchaseItems" collection
 * @method Doctrine_Collection getPurchasePayment() Returns the current record's "PurchasePayment" collection
 * @method PurchaseOrder       setSellerId()        Sets the current record's "seller_id" value
 * @method PurchaseOrder       setDateBegin()       Sets the current record's "date_begin" value
 * @method PurchaseOrder       setDateEnd()         Sets the current record's "date_end" value
 * @method PurchaseOrder       setTotalPrice()      Sets the current record's "total_price" value
 * @method PurchaseOrder       setTotalPaid()       Sets the current record's "total_paid" value
 * @method PurchaseOrder       setTotalDue()        Sets the current record's "total_due" value
 * @method PurchaseOrder       setOrderStatus()     Sets the current record's "order_status" value
 * @method PurchaseOrder       setNotes()           Sets the current record's "notes" value
 * @method PurchaseOrder       setSeller()          Sets the current record's "Seller" value
 * @method PurchaseOrder       setPurchaseItems()   Sets the current record's "PurchaseItems" collection
 * @method PurchaseOrder       setPurchasePayment() Sets the current record's "PurchasePayment" collection
 * 
 * @package    open-stock-management
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePurchaseOrder extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('purchase_order');
        $this->hasColumn('seller_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('date_begin', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('date_end', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('total_price', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('total_paid', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('total_due', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('order_status', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('notes', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Seller', array(
             'local' => 'seller_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('PurchaseItems', array(
             'local' => 'id',
             'foreign' => 'purchase_order_id'));

        $this->hasMany('PurchasePayment', array(
             'local' => 'id',
             'foreign' => 'purchase_order_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}