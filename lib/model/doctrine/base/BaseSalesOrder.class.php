<?php

/**
 * BaseSalesOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $client_id
 * @property timestamp $date_begin
 * @property timestamp $date_end
 * @property float $total_price
 * @property float $total_paid
 * @property float $total_due
 * @property integer $order_status
 * @property string $notes
 * @property Client $Client
 * @property Doctrine_Collection $SalesItems
 * @property Doctrine_Collection $SalesPayment
 * 
 * @method integer             getClientId()     Returns the current record's "client_id" value
 * @method timestamp           getDateBegin()    Returns the current record's "date_begin" value
 * @method timestamp           getDateEnd()      Returns the current record's "date_end" value
 * @method float               getTotalPrice()   Returns the current record's "total_price" value
 * @method float               getTotalPaid()    Returns the current record's "total_paid" value
 * @method float               getTotalDue()     Returns the current record's "total_due" value
 * @method integer             getOrderStatus()  Returns the current record's "order_status" value
 * @method string              getNotes()        Returns the current record's "notes" value
 * @method Client              getClient()       Returns the current record's "Client" value
 * @method Doctrine_Collection getSalesItems()   Returns the current record's "SalesItems" collection
 * @method Doctrine_Collection getSalesPayment() Returns the current record's "SalesPayment" collection
 * @method SalesOrder          setClientId()     Sets the current record's "client_id" value
 * @method SalesOrder          setDateBegin()    Sets the current record's "date_begin" value
 * @method SalesOrder          setDateEnd()      Sets the current record's "date_end" value
 * @method SalesOrder          setTotalPrice()   Sets the current record's "total_price" value
 * @method SalesOrder          setTotalPaid()    Sets the current record's "total_paid" value
 * @method SalesOrder          setTotalDue()     Sets the current record's "total_due" value
 * @method SalesOrder          setOrderStatus()  Sets the current record's "order_status" value
 * @method SalesOrder          setNotes()        Sets the current record's "notes" value
 * @method SalesOrder          setClient()       Sets the current record's "Client" value
 * @method SalesOrder          setSalesItems()   Sets the current record's "SalesItems" collection
 * @method SalesOrder          setSalesPayment() Sets the current record's "SalesPayment" collection
 * 
 * @package    open-stock-management
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSalesOrder extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sales_order');
        $this->hasColumn('client_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('date_begin', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('date_end', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('total_price', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('total_paid', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('total_due', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('order_status', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('notes', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Client', array(
             'local' => 'client_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('SalesItems', array(
             'local' => 'id',
             'foreign' => 'sales_order_id'));

        $this->hasMany('SalesPayment', array(
             'local' => 'id',
             'foreign' => 'sales_order_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}